/*
	Shobhit Mittal	14116061
	Btech ECE 3rd year
	Bellman Ford Algo
	DAA Assignment
*/

#include<iostream>
#include<time.h>
using namespace std;

struct Edge
{
	int src;
	int dest;
	int wt;	
};

void bellmanFord(struct Edge* graph,int src,int V,int E)
{
	int dist[V];
	int INT_MAX=99999;
	int x,y,w;
	dist[src]=0;	//dist from src to src is 0
	for(int i=0;i<V;i++)	//dist from src to any other vertex has been initialized to infnite
	{
		if(i!=src)	dist[i]=INT_MAX;
	}
	
	for(int i=1;i<V-1;i++)	//Relaxing all edges V-1 times
	{
		for(int j=0;j<E;j++)
		{
			x=graph[j].src;
			y=graph[j].dest;
			w=graph[j].wt;
			if(dist[x]!=INT_MAX && dist[y]>dist[x]+w )	dist[y]=dist[x]+w;	
		}
		
	}
	
	for(int i=0;i<E;i++)	//checking if a negative cycle exists or not
	{
			x=graph[i].src;
			y=graph[i].dest;
			w=graph[i].wt;
			if(dist[x]!=INT_MAX && dist[y]>dist[x]+w )
				cout<<"Graph contains negative weight cycle"<<endl;
	}
	
	for(int i=0;i<V;i++)
		cout<<"Shortest distance of vertex "<<i<<" from "<<src<<" is = "<<dist[i]<<endl;
}

int main()
{
    int vertices,edges,source;
    cin >> vertices >> edges;
    Edge* graph=new Edge[edges];
    
    for(int i=0;i<edges;i++){
    	cin >> graph[i].src >> graph[i].dest >> graph[i].wt;
    }
    
    clock_t t;
    float clocks_per_sec=1000;
    float time;
    t=clock();
    bellmanFord(graph,0,vertices,edges);
    t=clock()-t;
    time=(float(t))/clocks_per_sec;
 	cout<<"Time taken is = "<<time<<endl;
	
}
