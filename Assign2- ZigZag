#include<iostream>
#include<vector>
using namespace std;

// function to find longest zigzag subsequence
int LZS(int a[],int n)
{
	int table[2][n]; 
			
	int temp;
	table[0][0]=1;
	table[1][0]=1;
	for(int i=1;i<n;i++)
	{
		table[0][i]=-1;
		table[1][i]=-1;
		
		for(int j=i-1;j>=0;j--)	// LZS(a[i]) = Max( 1+LZS(a[],j), LZS(a[],i-1) )  j will vary from 0 to i-1
		{
			if(a[j]>a[i]) {
				temp=1+table[1][j];
				if(temp>table[0][i])	table[0][i]=temp;
			}	
			else if(a[j]<a[i]) {
				temp=1+table[0][j];
				if(temp>table[1][i])	table[1][i]=temp;
			}	
			
		}
		//Check if ith element will be a part of LZS(a[],i) or not
		if(table[0][i-1]>table[0][i])	table[0][i]=table[0][i-1];
		if(table[1][i-1]>table[1][i])	table[1][i]=table[1][i-1];
	}
	
	return max(table[0][n-1],table[1][n-1]);
}

int main()
{
	int n;
	cout<<"Enter array length: ";
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cout<<"Enter "<<i+1<<"th element: ";
		cin>>arr[i];
	}
	int k=LZS(arr,n);
	cout<<k;
}
