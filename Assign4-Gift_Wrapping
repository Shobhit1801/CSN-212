#include<iostream>
#include<vector>
using namespace std;

//data stucture to represent a point
struct Point
{
	int x;
	int y;
};

//function to check whether p,q,r are CCW or CW
bool isCCW(Point p,Point q,Point r)
{
	//int abSlope = (b.y - a.y)/(b.x - a.x);
	//int bcSlope = (c.y - b.y)/(c.x - b.x);
	   int val = (q.y - p.y) * (r.x - q.x) -  (q.x - p.x) * (r.y - q.y);
	if(val<0)	return 1;
	return 0;
}

void giftWrapping(Point points[],int n)
{
	if(n<3)	return;
	vector<int> hull;
	//find leftmost point
	int left = 0;
	for(int i=0;i<n;i++)
	{
		if(points[i].x < points[left].x)
			left = i;
	}
	
	hull.push_back(left);
	int p = left;
	//cout<<p<<endl;
	int q;
	while(1)
	{
		//p = hull[hull.size()-1];
		q = (p+1)%n;
		
		for(int i=0;i<n;i++)
		{
			if(i!=p && i!=q)
			{
				if(isCCW(points[p],points[i],points[q])==1)
					q=i;
			}
		}
		p=q;
		if(p==hull[0])
			break;
		hull.push_back(q);
	}
	
	for(int i=0;i<hull.size();i++)
		cout<<"("<<points[hull[i]].x<<","<<points[hull[i]].y<<")"<<endl;
}

int main()
{
    Point points[] = {{0, 3}, {2, 2}, {1, 1}, {2, 1},
                      {3, 0}, {0, 0}, {3, 3}};
    int n = sizeof(points)/sizeof(points[0]);
    giftWrapping(points, n);
    return 0;
}
